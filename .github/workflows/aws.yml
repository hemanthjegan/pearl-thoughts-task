name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: ap-south-1                   # Set to your preferred AWS region
  ECS_SERVICE: tf-service                  # Set to your ECS service name
  ECS_CLUSTER: tf-cluster                  # Set to your ECS cluster name
  CONTAINER_NAME: tf-container             # Set to the name of the container in the task definition
  ECS_TASK_DEFINITION_FAMILY_NAME: tf-td
  EXECUTION_ROLE_ARN: ${{ env.EXECUTION_ROLE_ARN }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile ./
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: describe task definition
      run: |
        echo '
        {
          "family": "${{ env.ECS_TASK_DEFINITION_FAMILY_NAME }}",
          "networkMode": "awsvpc",
          "executionRoleArn": "${{ env.EXECUTION_ROLE_ARN }}",
          "containerDefinitions": [
            {
              "name": "${{ env.CONTAINER_NAME }}",
              "image": "${{ steps.build-image.outputs.image }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 3000,
                  "hostPort": 3000,
                  "protocol": "tcp"
                }
              ],
              "memory": 512,
              "cpu": 256,
              "environment": [
                {
                  "name": "NODE_ENV",
                  "value": "production"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/nodejs-app",
                  "awslogs-region": "ap-south-1",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ],
          "requiresCompatibilities": [
            "FARGATE"
          ],
          "cpu": "256",
          "memory": "512"
        }
        ' > task-def

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-def
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
